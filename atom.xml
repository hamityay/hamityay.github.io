<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://hamityay.github.io/atom.xml" rel="self"/>
  <link href="http://hamityay.github.io/"/>
  <updated>2016-08-02T12:29:53+03:00</updated>
  <id>http://hamityay.github.io/</id>
  <author>
    <name><![CDATA[Hamit YAY]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Flow]]></title>
    <link href="http://hamityay.github.io/blog/2016/08/02/git-flow/"/>
    <updated>2016-08-02T10:14:30+03:00</updated>
    <id>http://hamityay.github.io/blog/2016/08/02/git-flow</id>
    <content type="html"><![CDATA[<p>Git flow, git deki yeni bir branch oluşturma işlemlerini bir standart haline getirmiş, uygulama geliştirme aşamasında büyük kolaylık sağlayan git tabanlı bir araçtır. Git tabanlı olması git deki komutların aynen kullanılabilmesini sağlar.</p>

<h4>Git flowu kurmak için</h4>

<pre><code>apt-get install git-flow
</code></pre>

<p>komutunu (linux için) terminal üzerinde çalıştırmak gerekir.</p>

<h4>Git flowu bir projede kullanabilmek için başalangıçta</h4>

<pre><code>git flow init
</code></pre>

<p>komutu kullanılır.</p>

<p>Git flowda standartlaştırılmış 5 adet branch mevcut. Bunlar;</p>

<ul>
<li><p><strong>Master</strong> ana branch.</p></li>
<li><p><strong>Develop</strong> uygulama geliştirme branchi.</p></li>
<li><p><strong>Feature</strong> uygulamaya yeni bir özellik eklemek için branch. Her bir yeni özellikiçin yeni bir feature branch oluşturmak ve bitirmek gerekiyor. nasıl yapıldığına birazdan değineceğiz.</p></li>
<li><p><strong>Hotfix</strong> uygulamadaki ataları gidermek için branch.</p></li>
<li><p><strong>Release</strong> uygulamayı yayınlamak için branch.</p></li>
</ul>


<h4>Yeni bir feature (özellik) oluşturmak için</h4>

<pre><code>git flow feature start myfeature
</code></pre>

<p>komutu kullanılır. Bu komut uygulamaya yeni bir özellik eklemek için develop brachini temel alan myfeature isimli feature branch ouşturur.</p>

<h4>Bir feature tamamlamak için</h4>

<pre><code>git flow feature finish myfeature
</code></pre>

<p>komutu kullanır. Bu komut kullanılan branchi develop olarak değiştirir. Eklenmiiş olan özellikleri develop branchi ile birleştirir.(merge) Oluşturulmuş olan myfeature feature branchini siler</p>

<h4>Bir feature yayınlamak için</h4>

<pre><code>git flow feature publish myfeature
</code></pre>

<p>komutu kullanılır. Bir ekip olarak çalışılıyorsa ekipdeki diğerleri bu feature a ulaşabilirler.</p>

<h4>Yayınlanmış bir feature ı almak için</h4>

<pre><code>git flow feature pull myfeature
</code></pre>

<p>komutu kullanılır.</p>

<h4>Bir uygulamayı yayımlamak için (release)</h4>

<pre><code>git flow release start 0.1.0
</code></pre>

<p>örnek komutu kullanılır. Bu kumut yeni bir release branch oluşturur.</p>

<h4>Yayımlanmış bir release i yayınlamak için</h4>

<pre><code>git flow release publish 0.1.0
</code></pre>

<p>komutu kullanılır. Bu komut öncesinde local olarak yapılan release barnchi ile beraber yayınlamayı sağlar.</p>

<h4>Bir uygulamanın yayımlanmasını bitirmek için</h4>

<pre><code>git flow release finish 0.1.0
</code></pre>

<p>komutu kullaılır. Bu komut release barnchini master branchine birleştirir. Arka planda develop barnchi ile de birleştirir. Yayınlama için açılmış olan 0.1.0 release branch silinir.</p>

<h4>Yeni bir hata düzeltme branchi oluşturmak için</h4>

<pre><code>git flow hotfix start version
</code></pre>

<p>komutu kullanılır. Yeni bir hotfix branch oluşturur.</p>

<h4>Hata düzeltme branchini bitirmek için</h4>

<pre><code>git flow hotfix finish version
</code></pre>

<p>komutu kullanılır. Bu komut oluşturulmuş olan hotfix branchini develop ve master branchleri ile birleştirir. Hotfix brnachi silinir.</p>

<p>Aşağıdaki resimde çeşitli git flow işlemleri gösterilmektedir.</p>

<p><img src="http://nvie.com/img/git-model@2x.png" alt="alt text" /></p>

<p>Aşağıda git flow için komut şablonu gösterilmektedir.</p>

<p><img src="http://danielkummer.github.io/git-flow-cheatsheet/img/git-flow-commands.png" alt="alt text" /></p>

<p>Daha detaylı bilgi için <a href="http://danielkummer.github.io/git-flow-cheatsheet/">git-flow cheatsheet</a> adrsini ziyaret edebilirsiniz.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Semantik Versiyonlama]]></title>
    <link href="http://hamityay.github.io/blog/2016/08/02/semantik-versiyonlama/"/>
    <updated>2016-08-02T09:13:07+03:00</updated>
    <id>http://hamityay.github.io/blog/2016/08/02/semantik-versiyonlama</id>
    <content type="html"><![CDATA[<p>Versiyonlama işlemi uygulamalar için bir sınıflandırma iişlemidir. Geriye yönelik geliimini takip edebilmek ve hata denetiminiyapabilmek gibi bir çok amaca hizmet eder.</p>

<p>Semantik versiyonlama, uygulama versiyonlama işlemi için belirli standartları olan ve yagın olarak kullanılan versiyonlama sistemidir.</p>

<blockquote><p>Rails 4.2.6</p></blockquote>

<p>Rails'ın bir önceki sürümünü örnek olarak verecek olursak;</p>

<blockquote><p>Rails  4 | 2 | 6</p>

<p>   major|minor|patch</p></blockquote>

<p>versiyon numaralarını bu şekilde illişkilendirebiliriz.(Semantik Versiyonlamaya uygun olarak)</p>

<dl>
<dt><strong><em>Major</em></strong></dt>
<dd>  Uygulamada köklü değişikler yapıldığında değişir. <strong>Bu değişiklikler geriye yönelik (önceki sürümler ile) uyumlu olmayabilir. (Gerie Yönelik Uyumlu Değildir)</strong></dd>
<dt><strong><em>Minor</em></strong></dt>
<dd>  Uygulamaya yeni özellikler, fonksiyonellikler eklendiğinde değişir. <strong>Bu değişiklikler geriye yönelik uyumludur.</strong></dd>
<dt><strong><em>Patch</em></strong></dt>
<dd>  Uygulamada oluşan hataların giderilmesi gibi durumlarda değişir. <strong>Bu değişiklikler geriye yönelik uyumludur.</strong></dd>
</dl>

<p>Major, Minor, Patch nuaralandırılırken dikkat edilmesi gereken hususları özetleyecek olursak;</p>

<ul>
<li><p> Negatif olmayan sayılar kullanılmalıdır.</p></li>
<li><p> Bir uygulama 0.1.0 versiyonu ile başlar.</p></li>
<li><p> Uygulamanın yayınlanması için 1.0.0 versiyonunda olmalıdır.</p></li>
<li><p> Bir uygulama henüz yayınlanmadıysa yani Major &lsquo;0&rsquo; (sıfır) ise uygulama karalı değildir.</p></li>
<li><p> Her uygulllama versiyonunu gösteren API'si olmalıdır.</p></li>
</ul>


<p>Versiyon numarası o uygulamanın yaşını, ne kadar geliştiğini ve ona ne kadar emek harcandığını gösterir.</p>

<p>Daha detaylı bilgi için <a href="http://semver.org/">Semantik Versiyoning 2.0</a> adresini ziyaret edebilir, türkçesi için ise <a href="https://github.com/lab2023/semver/blob/master/semver_tr.md">Lab2023 Semver</a> adresini ziyaret edebilirsiniz.</p>

<blockquote><p>Bir sonraki yazımız <strong><a href="https://hamityay.github.io/blog/2016/08/02/git-flow/">Git Flow</a></strong> hakkında olacaktır.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby-Ruby Environment Hakkında...]]></title>
    <link href="http://hamityay.github.io/blog/2016/08/01/ruby-ruby-environment-hakkinda-dot-dot-dot/"/>
    <updated>2016-08-01T19:54:21+03:00</updated>
    <id>http://hamityay.github.io/blog/2016/08/01/ruby-ruby-environment-hakkinda-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>Ruby bir object oriented programlam dilidir. 1995 yılında Yukihiro Matsumoto tarafından Japonyada tasarlanmıştır.</p>

<p>Ruby ingilizceye yakın ve anlaşılması kolay bir programa dilidir. Ruby çok çeşitli ve güçlü bir ekosisteme sahiptir. Bu sayede geliştiriciler için bir çok kolaylık sunmaktadır. Ruby, yazmaya başladığınızda anlayabileceğiniz gibi sintaxı kolay ve eğlenceli br dildir. Şu an Ruby'nin 2.3.1 karalı sürümü mecuttur.</p>

<p>Ruby environment burada devreye giriyor. Ruby environment, birçok proje için farklı ruby versiyonları ile çalışabilme olanağı sunmaktadır. Mesela A projesi 1.9 ruby versiyonu ile çalışırken, B projesi 2.3 versiyonu ile çalışır olsun. Bu iki farklı projeyi ruby environment sayesinde kolaylıkla çalıştırabiliriz. Ruby environmetn ile local ve global olarak ruby versiyonları tanımlayabiliriz. &lsquo;Local&rsquo; olarak tanımlanan ruby versiyonu sadece ilgili proje için geçerli olurken, &lsquo;global&rsquo; olarak tanımlanan ruby versiyonu ise yeni bir proje için ve local olarak tanımlanmayan projeler için geçerlidir.</p>

<p>Ruby environment için geçerli bazı kodları paylaşalım. <strong>Ubuntu terminal için geçerlidir.</strong></p>

<pre><code>rbenv versions
</code></pre>

<p>Bu komut ile tanımlamış olduğunuz global ve local tanımlı olan ruby versiyonlarının listesini görebilirsiniz.</p>

<pre><code>rbenv local 2.4.6
</code></pre>

<p>Proje kök dizinizde sadece o proje için geçerli ruby versiyonunuzun 2.4.6 olmasını sağlar. Yukarıda da bahsettiğimiz gibi ayrıca proje kök dizinine</p>

<blockquote><p>.ruby-versiyon</p></blockquote>

<p>dosyası oluşturup içine 2.4.6 yazıyor.</p>

<p>Ruby environment ile kullanılabilecek komutları ve açıklamalarını</p>

<pre><code>rbenv help
</code></pre>

<p>komutu ile terminalde listeleyebilirsiniz.</p>

<p>Ruby ve ruby environment ile ilgili daha detaylı bilgiyi <a href="https://www.ruby-lang.org">Ruby Programming Language</a> adresinden elde edebilirsiniz.</p>

<p>Ruby environment ile aynı işlevi gören <strong>Ruby Versiyon Manager (RVM)</strong> da mevcut ancak <strong>RuBy ENVironment (rbenv)</strong> daha yaygın olarak kullanılmaktadır.</p>

<blockquote><p>Bir sonraki yazımız <strong><a href="https://hamityay.github.io/blog/2016/08/02/semantik-versiyonlama/">Semantik Versiyonlama</a></strong> hakkında olacaktır.</p></blockquote>
]]></content>
  </entry>
  
</feed>
